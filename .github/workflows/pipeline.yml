name: Cypress E2E
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: Ambiente (dev/staging/prod)
        type: choice
        default: staging
        options: [dev, staging, prod]

env:
  DASHBOARD_API_URL: ${{ secrets.DASHBOARD_URL }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}

jobs:
  e2e:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cypress run
        uses: cypress-io/github-action@v6
        continue-on-error: true
        with:
          browser: chrome
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          DASHBOARD_API_URL: ${{ env.DASHBOARD_API_URL }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          CYPRESS_baseUrl: https://dash-report-cy.netlify.app/
          CYPRESS_DASHBOARD_API_URL: ${{ env.DASHBOARD_API_URL }}

      # Copia e normaliza artefatos em um s√≥ job
      - name: Prepare artifacts for deployment
        run: |
          # Criar estrutura
          mkdir -p public/artifacts/screenshots
          mkdir -p public/artifacts/videos
          
          # Copiar artefatos se existirem
          if [ -d "cypress/screenshots" ]; then
            cp -a cypress/screenshots/. public/artifacts/screenshots/
          fi
          
          if [ -d "cypress/videos" ]; then
            cp -a cypress/videos/. public/artifacts/videos/
          fi
          
          # Normalizar nomes com m√©todo mais simples
          find public/artifacts -type f -name "* *" | while read file; do
            newname=$(echo "$file" | sed 's/ /_/g')
            mv "$file" "$newname" 2>/dev/null || true
          done
          
          # Remover caracteres especiais
          find public/artifacts -type f | while read file; do
            dir=$(dirname "$file")
            base=$(basename "$file")
            newbase=$(echo "$base" | sed 's/[√°√†√¢√£√§√Å√Ä√Ç√É√Ñ]/a/g; s/[√©√®√™√´√â√à√ä√ã]/e/g; s/[√≠√¨√Æ√Ø√ç√å√é√è]/i/g; s/[√≥√≤√¥√µ√∂√ì√í√î√ï√ñ]/o/g; s/[√∫√π√ª√º√ö√ô√õ√ú]/u/g; s/[√ß√á]/c/g; s/[^a-zA-Z0-9._-]/_/g')
            if [ "$base" != "$newbase" ]; then
              mv "$file" "$dir/$newbase" 2>/dev/null || true
            fi
          done
          
          # Listar arquivos finais
          echo "üìÅ Arquivos preparados:"
          find public/artifacts -type f | head -20

      - name: Install Netlify CLI
        run: npm install -g netlify-cli

      # Deploy direto no mesmo job
      - name: Deploy to Netlify
        run: netlify deploy --dir=public --prod
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
