name: Cypress E2E

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: Ambiente (dev/staging/prod)
        type: choice
        default: staging
        options: [dev, staging, prod]

env:
  DASHBOARD_API_URL: ${{ secrets.DASHBOARD_URL }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}

jobs:
  # --- JOB 1: Roda os testes e prepara os artefatos ---
  e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cypress run
        uses: cypress-io/github-action@v6
        continue-on-error: true # Continua mesmo se testes falharem para podermos salvar os v√≠deos/screenshots do erro
        with:
          browser: chrome
          env: |
            GITHUB_REF_NAME=${{ github.ref_name }}
            GITHUB_SHA=${{ github.sha }}
            GITHUB_ACTOR=${{ github.actor }}
            GITHUB_REPOSITORY=${{ github.repository }}
            GITHUB_RUN_ID=${{ github.run_id }}
            DASHBOARD_API_URL=${{ env.DASHBOARD_API_URL }}
            ENVIRONMENT=${{ env.ENVIRONMENT }}
            CYPRESS_baseUrl=https://dash-report-cy.netlify.app/
            CYPRESS_DASHBOARD_API_URL=${{ env.DASHBOARD_API_URL }}

      - name: Upload Cypress artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cypress-artifacts
          path: |
            cypress/screenshots
            cypress/videos
          if-no-files-found: ignore # N√£o falha se n√£o houver screenshots/v√≠deos

  # --- JOB 2: Faz o deploy do dashboard com os artefatos ---
  deploy:
    needs: e2e # Este job s√≥ roda depois que o job 'e2e' terminar
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Download Cypress artifacts
        uses: actions/download-artifact@v4
        with:
          name: cypress-artifacts
          path: cypress-results # Baixa para uma pasta tempor√°ria

      - name: Install dependencies
        run: npm ci

      # --- Etapa de Montagem da Pasta 'public' ---
      
      - name: Build frontend dashboard
        run: echo "No build needed - serving static files"

      - name: Prepare public directory
        run: |
          mkdir -p public/artifacts
          # Move o build do seu frontend para a raiz da pasta public
          # ATEN√á√ÉO: A pasta de sa√≠da do build pode ser 'dist', 'build' ou outra. Ajuste o comando abaixo se necess√°rio.
          echo "Copiando build do frontend da pasta 'dist'..."
          cp -r dist/* public/
          
          # Move os artefatos do Cypress para a subpasta
          echo "Copiando artefatos do Cypress..."
          if [ -d "cypress-results/screenshots" ]; then
            cp -r cypress-results/screenshots public/artifacts/
          fi
          if [ -d "cypress-results/videos" ]; then
            cp -r cypress-results/videos public/artifacts/
          fi

      - name: Normalize artifact filenames
        run: |
          sudo apt-get update && sudo apt-get install -y rename
          # Comando robusto para renomear arquivos e pastas, removendo caracteres especiais
          find public/artifacts -depth -exec rename 's/[^A-Za-z0-9._-]/_/g' {} +
          echo "‚úÖ Nomes de arquivos normalizados."

      - name: Display final structure for debugging
        run: |
          echo "üìã Estrutura final da pasta 'public' a ser enviada:"
          ls -laR public/

      # --- Etapa de Deploy ---

      - name: Install Netlify CLI
        run: npm install -g netlify-cli

      - name: Deploy to Netlify
        run: netlify deploy --dir=public --prod
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
